MODULE main
VAR
    total_time: 0 .. 1000;
    torch: {free, busy};
    all_crossed: boolean;
    soliderA: {waiting_start, waiting_end};
    soliderB: {waiting_start, waiting_end};
    status: array 0 .. 3 of {waiting_start, waiting_end};
    indexA: {0, 1, 2, 3};
    indexB: {0, 1, 2, 3};
    time: array 0 .. 3 of {5, 10, 20, 25};
    location: {waiting_start, waiting_end, crossing_forward, crossing_backward};

ASSIGN
    init(total_time) := 0;
    init(torch) := free;
    init(status[0]) := waiting_start;
    init(status[1]) := waiting_start;
    init(status[2]) := waiting_start;
    init(status[3]) := waiting_start;
    init(time[0]) := 5;
    init(time[1]) := 10;
    init(time[2]) := 20;
    init(time[3]) := 25;
    init(all_crossed) := FALSE;
    init(soliderA) := status[0];
    init(soliderB) := status[1];
    init(indexA) := 0;
    init(indexB) := 1;
    init(location) := waiting_start;

    next(indexA) := case
        location = waiting_start: {0, 1, 2, 3};
        TRUE: indexA;
        esac;

    next(indexB) := case
        location = waiting_start: {0, 1, 2, 3};
        TRUE: indexB;
        esac;

    next(soliderA) := case
        location = waiting_start: status[indexA];
        location = waiting_end: waiting_end;
        location = crossing_backward: {waiting_start, waiting_end};
        TRUE: soliderA;
        esac;

    next(soliderB) := case
        location = waiting_start: status[indexB];
        location = waiting_end: waiting_end;
        location = crossing_backward: {waiting_start, waiting_end};
        TRUE: soliderB;
        esac;

    next(location) := case
        location = waiting_start & soliderA = waiting_start & soliderB = waiting_start & torch = free: crossing_forward;
        location = waiting_end & all_crossed = FALSE: crossing_backward;
        location = crossing_backward & (soliderB = waiting_start | soliderB = waiting_start): waiting_start;
        location = crossing_forward: waiting_end;
        TRUE: location;
        esac;

    next(torch) := case
        location = crossing_forward: busy;
        location = crossing_backward: free;
        location = waiting_start: free;
        location = waiting_end: busy;
        TRUE: torch;
        esac;

    -- Check if everyone crossed the bridge or not
    next(all_crossed) := case
        all_crossed = FALSE: (status[0] = waiting_end & status[1] = waiting_end & status[2] = waiting_end & status[3] = waiting_end);
        TRUE: all_crossed;
        esac;

    -- Code blow makes execution real slow, get the rest to work before working on time --
    --next(total_time) := case
    --    location = waiting_end & time[indexA] > time[indexB] & total_time < 500: total_time + time[indexA];
    --    location = waiting_end & time[indexB] > time[indexA] & total_time < 500: total_time + time[indexB];
    --    location = crossing_backward & soliderA = waiting_start & soliderB = waiting_end & total_time < 500: total_time + time[indexA];
    --    location = crossing_backward & soliderA = waiting_end & soliderB = waiting_start & total_time < 500: total_time + time[indexB];
    --    location = crossing_backward & soliderA = waiting_start & soliderB = waiting_start & time[indexB] >= time[indexA] & total_time < 500: total_time + time[indexB];
    --    location = crossing_backward & soliderA = waiting_start & soliderB = waiting_start & time[indexA] > time[indexB] & total_time < 500: total_time + time[indexA];
    --    TRUE: total_time;
    --    esac;



--check_ltlspec -p "F (all_crossed = TRUE)"
--check_ltlspec -p "G (total_time <= 60 -> F (status[0] = waiting_end & status[1] = waiting_end & status[2] = waiting_end & status[3])= waiting_end)"